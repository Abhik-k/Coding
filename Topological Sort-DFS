Topological Sort using DFS

class Solution
{
    
    static void dfs(int node,int vis[],Stack<Integer>st,ArrayList<ArrayList<Integer>> adj){
        vis[node]=1;
        
        for(int it:adj.get(node)){
            if(vis[it]==0){
                dfs(it,vis,st,adj);
            }
        }
        st.push(node);
    }
    
    
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        Stack<Integer> st = new Stack<>();
        
        int vis[]=new int[V];
        
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                dfs(i,vis,st,adj);
            }
        }
        int res[]=new int[V];
        
        int i=0;
        
        while(!st.isEmpty()){
            res[i++]=st.peek();
            st.pop();
        }
        
        return res;
    }
}
